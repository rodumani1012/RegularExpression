Page1~6

// 기본적으로 정규 표현식은 대소문자, 공백을 구분한다.
// ^ 는 앞에서부터 검색, $는 뒤에서부터 검색, \는 escape 문자.
		
제시어 : Hello, world!

1. 정규표현식 : Hello
Frist match : (Hello), world!
All matches : (Hello), world!

2. 정규표현식 : hello
Frist match : Hello, world!
All matches : Hello, world!


제시어 : Hello, world!

1. 정규표현식 : Hello, world
Frist match : (Hello, world)!
All matches : (Hello, world)!

2. 정규표현식 : Hello,  world
Frist match : Hello, world!
All matches : Hello, world!


제시어 : who is who
		 
1. 정규표현식 : ^who    => 앞에서 부터 who라는 텍스트를 찾아라.
Frist match : (who) is who 
All matches : (who) is who
 
2. 정규표현식 : who$    => 뒤에서 부터 who라는 텍스트를 찾아라.
Frist match : who is (who) 
All matches : who is (who)
 
// \ : escape 문자
제시어 : $12$ \-\ $25$
 
1. 정규표현식 : \$     => 문자 $를 전부 찾아라.
First match: ($)12$ \-\ $25$ 
All matches: ($)12($) \-\ ($)25($)
 
2. 정규표현식 : ^\$    => 문자 $를 앞에서부터 찾아라.
First match: ($)12$ \-\ $25$ 
All matches: ($)12$ \-\ $25$
 
3. 정규표현식 : \$$    => 문자 $를 뒤에서부터 찾아라.
First match: $12$ \-\ $25($) 
All matches: $12$ \-\ $25($)
 
 
// . 은 공백도 포함해 모든 문자를 매칭시킨다. 점의 갯수에 따라 단어를 묶는다.

제시어 : Regular Expressions are powerful!!!
 
1. 정규표현식 : .
First match : R 
All matches : Regular Expressions are powerful!!!
 
2. 정규표현식 : ......
First match : Regula 
All matches : (Regula)(r Expr)(ession)(s are )(powerf)ul!!!

제시어 : O.K.

1. 정규표현식 : \..\.    => .과 . 사이에 있는 텍스트를 모두 찾아라.
First match : O(.K.)
All matches : O(.K.)

/*******************************************************************************************************************************************************/

Page7~9

// 원하는 문자 후보군 정하기.
// [] : 대괄호(square brackets)

제시어 : How do you do?
		 
1. 정규표현식 : [oyu]	=> o, y, u를 찾아줌
Frist match : H(o)w do you do? 
All matches : H(o)w d(o) (you) d(o)?

2. 정규표현식 : [dH].	=> d?, H?   2문자를 찾아줌
Frist match : (Ho)w do you do?
All matches : (Ho)w (do) you (do)?

3. 정규표현식 : [owy][yow]	=> oy, oo, ow, wy, wo, ww, yy, yo, yw 를 찾음(행렬 생각하면 됨)
Frist match : H(ow) do you do?
All matches : H(ow) do (yo)u do?


// 범위기호 '-'
제시어 : ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789

1. 정규표현식 : [C-K]	=> [CDEFGHIJK]랑 같은 말
First match : AB(C)DEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789
All matches : AB(CDEFGHIJK)LMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789

2. 정규표현식 : [a-d]	=> [abcd]랑 같은 말
First match : ABCDEFGHIJKLMNOPQRSTUVWXYZ (a)bcdefghijklmnopqrstuvwxyz 0123456789
All matches : ABCDEFGHIJKLMNOPQRSTUVWXYZ (abcd)efghijklmnopqrstuvwxyz 0123456789

3. 정규표현식 : [2-6]	=> [23456]랑 같은 말
First match : ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 01(2)3456789
All matches : ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 01(23456)789

4. 정규표현식 : [C-Ka-d2-6]	=> C~K까지, a~d까지, 2~6까지
First match : AB(C)DEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789
All matches : AB(CDEFGHIJK)LMNOPQRSTUVWXYZ (abcd)efghijklmnopqrstuvwxyz 01(23456)789



// ^ 이 [] 안에 들어가면 not을 의미함. [^] => !=
제시어 : ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789

1. 정규표현식 : [^CDghi45]	=> [CDghi45] 를 제외한 문자 탐색
First match : (A)BCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789
All matches : (AB)CD(EFGHIJKLMNOPQRSTUVWXYZ) (abcdef)ghi(jklmnopqrstuvwxyz 0123)45(6789)

2. 정규표현식 : [^W-Z]	=> [W-Z] 를 제외한 문자 탐색
First match : (A)BCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789
All matches : (ABCDEFGHIJKLMNOPQRSTUV)WXYZ (abcdefghijklmnopqrstuvwxyz 0123456789)

/*******************************************************************************************************************************************************/

Page10

// 서브패턴 : () 덩어리로 보는 역할
// 파이프 : |  or를 의미함

제시어 : Monday Tuesday Friday

1. 정규표현식 : (on|ues|rida)   => 문자열 중에 'on'이나 'ues'나 'rida'를 찾아줌
Frist match : M(on)day Tuesday Friday
All matches : M(on)day T(ues)day F(rida)y

2. 정규표현식 : (Mon|Tues|Fri)day   => 문자열 중에 'Mon'+'day', 'Tues'+'day', 'Fri'+'day' 를 찾아줌
Frist match : (Monday) Tuesday Friday
All matches : (Monday) (Tuesday) (Friday)

3. 정규표현식 : ..(id|esd|nd)ay   => 문자열 중에 ..+'id'+'ay', ..+'esd'+'ay', ..+'nd'+'ay' 를 찾아줌
Frist match : (Monday) Tuesday Friday
All matches : (Monday) (Tuesday) (Friday)


/*******************************************************************************************************************************************************/

Page11~14

// (고정)수량자 : * (Quantifiers), + (Plus), ? (Question Mark)
// 해당 문자가 얼만큼 등장하는가?
// * : 0개 이상
// + : 1개 이상
// ? : 1개 이하

제시어 : aabc abc bc

1. 정규표현식 : a*b    => a가 0개 이상이면서 뒤에 b가 있는 텍스트를 찾아라.
Frist match : (aab)c abc bc
All matches : (aab)c (ab)c (b)c

2. 정규표현식 : a+b    => a가 1개 이상이면서 뒤에 b가 있는 텍스트를 찾아라.
Frist match : (aab)c abc bc
All matches : (aab)c (ab)c bc

3. 정규표현식 : a?b    => a가 1개 이하이면서 뒤에 b가 있는 텍스트를 찾아라.
Frist match : a(ab)c abc bc
All matches : a(ab)c (ab)c (b)c


제시어 : -@- *** -- "*" -- *** -@-

1. 정규표현식 : .*    => 모든 텍스트
Frist match : (-@- *** -- "*" -- *** -@-)
All matches : (-@- *** -- "*" -- *** -@-)

2. 정규표현식 : -A*-    => 맨 앞과 맨 뒤에 -가 있어야 하고 그 사이에 A가 0개 이상인 텍스트
Frist match : -@- *** (--) "*" -- *** -@-
All matches : -@- *** (--) "*" (--) *** -@-

3. 정규표현식 : [-@]*    => - 또는 @가 0개 이상인 텍스트
Frist match : (-@-) *** -- "*" -- *** -@-
All matches : (-@-) *** (--) "*" (--) *** (-@-)


제시어 : -@@@- * ** - - "*" -- * ** -@@@-

1. 정규표현식 : \*+    => * 문자가 1개 이상인 텍스트
Frist match : -@@@- (*) ** - - "*" -- * ** -@@@-
All matches : -@@@- (*) (**) - - "(*)" -- (*) (**) -@@@-

2. 정규표현식 : -@+-    => 맨 앞과 맨 뒤에 -가 있어야 하고 그 사이에 @가 1개 이상인 텍스트. 
Frist match : (-@@@-) * ** - - "*" -- * ** -@@@-
All matches : (-@@@-) * ** - - "*" -- * ** (-@@@-)

3. 정규표현식 : [^ ]+    => 공백이 아닌것이 1개이상 있는 텍스트
Frist match : (-@@@-) * ** - - "*" -- * ** -@@@-
All matches : (-@@@-) (*) (**) (-) (-) ("*") (--) (*) (**) (-@@@-)


제시어 : --XX-@-XX-@@-XX-@@@-XX-@@@@-XX-@@-@@-

1. 정규표현식 : -X?XX?X    => '-' + 1개 이하 X + 'X' + 1개 이하 X + X  인 텍스트. 즉 -~X~X
Frist match : -(-XX)-@-XX-@@-XX-@@@-XX-@@@@-XX-@@-@@-
All matches : -(-XX)-@(-XX)-@@(-XX)-@@@(-XX)-@@@@(-XX)-@@-@@-

2. 정규표현식 : -@?@?@?-    => '-' + 1개 이하 @ + 1개 이하 @ + 1개이하 @ + '-' 인 텍스트. 
                                즉 - 사이에 @ 최대 3개까지만 허용
Frist match : (--)XX-@-XX-@@-XX-@@@-XX-@@@@-XX-@@-@@-
All matches : (--)XX(-@)-XX(-@@-)XX(-@@@-)XX-@@@@-XX(-@@-)@@-

3. 정규표현식 : [^@]@?@    => @ 이외 문자 + 1개 이하 @ + @ 인 텍스트.
Frist match : --XX(-@)-XX-@@-XX-@@@-XX-@@@@-XX-@@-@@-
All matches : --XX(-@)-XX(-@@)-XX(-@@)@-XX(-@@)@@-XX(-@@-@@)-

/*******************************************************************************************************************************************************/

Page15~17

// (반복)수량자 : {m,n}    => 중괄호 안에 원하는 숫자를 넣어 수량을 제한할 수 있음
// {n} : n개인
// {m, n} : m개 이상 n개 이하인
// {n,} : n개 이상
// 수량자 뒤에 ? 가 오면 해당 수량자의 최소값으로 바뀜.
// *? : 0
// +? : 1
// ?? : 0

제시어 : One ring to bring them all and in the darkness bind them

1. 정규표현식 : .{5}    => 어떠한 문자든 5글자인 텍스트.
Frist match : (One r)ing to bring them all and in the darkness bind them
All matches : (One ring to bring them all and in the darkness bind the)m

2. 정규표현식 : [els]{1,3}    => e,l,s 문자가 1~3개인 텍스트.
Frist match : On(e) ring to bring them all and in the darkness bind them
All matches : On(e) ring to bring th(e)m a(ll) and in th(e) darkn(ess) bind th(e)m

3. 정규표현식 : [a-z]{3,}    => a~z 문자가 3개 이상인 텍스트.
Frist match : One (ring) to bring them all and in the darkness bind them
All matches : One (ring) to (bring) (them) (all) (and) in (the) (darkness) (bind) (them)


제시어 : AA ABA ABBA ABBBA

1. 정규표현식 : AB*A    => A 사이에 B가 0개 이상
Frist match : (AA) ABA ABBA ABBBA
All matches : (AA) (ABA) (ABBA) (ABBBA)

2. 정규표현식 : AB{0,}A    => A 사이에 B가 0개 이상
Frist match : (AA) ABA ABBA ABBBA
All matches : (AA) (ABA) (ABBA) (ABBBA)

3. 정규표현식 : AB+A    => A 사이에 B가 1개 이상
Frist match : AA (ABA) ABBA ABBBA
All matches : AA (ABA) (ABBA) (ABBBA)

4. 정규표현식 : AB{1,}A    => A 사이에 B가 1개 이상
Frist match : AA (ABA) ABBA ABBBA
All matches : AA (ABA) (ABBA) (ABBBA)

5. 정규표현식 : AB?A    => A 사이에 B가 1개 이하
Frist match : (AA) ABA ABBA ABBBA
All matches : (AA) (ABA) ABBA ABBBA

6. 정규표현식 : AB{0,1}A    => A 사이에 B가 1개 이하
Frist match : (AA) ABA ABBA ABBBA
All matches : (AA) (ABA) ABBA ABBBA


// 수량자 뒤에 ? 가 오면 해당 수량자의 최소값으로 바뀜.
// *? : 0
// +? : 1
// ?? : 0
제시어 : One ring to bring them all and in the darkness bind them

1. 정규표현식 : r.*    => r 뒤에 어떤 문자가 0개 이상
Frist match : One (ring to bring them all and in the darkness bind them)
All matches : One (ring to bring them all and in the darkness bind them)

2. 정규표현식 : r.*?    => r 뒤에 어떤 문자가 0개
Frist match : One (r)ing to bring them all and in the darkness bind them
All matches : One (r)ing to b(r)ing them all and in the da(r)kness bind them

3. 정규표현식 : r.+    => r 뒤에 어떤 문자가 1개 이상
Frist match : One (ring to bring them all and in the darkness bind them)
All matches : One (ring to bring them all and in the darkness bind them)

4. 정규표현식 : r.+?    => r 뒤에 어떤 문자가 1개
Frist match : One (ri)ng to bring them all and in the darkness bind them
All matches : One (ri)ng to b(ri)ng them all and in the da(rk)ness bind them

5. 정규표현식 : r.?    => r 뒤에 어떤 문자가 1개 이하
Frist match : One (ri)ng to bring them all and in the darkness bind them
All matches : One (ri)ng to b(ri)ng them all and in the da(rk)ness bind them

6. 정규표현식 : r.??    => r 뒤에 어떤 문자가 0개
Frist match : One (r)ing to bring them all and in the darkness bind them
All matches : One (r)ing to b(r)ing them all and in the da(r)kness bind them

/*******************************************************************************************************************************************************/

Page18~24

// Character Class : \w, \W, \s, \S
// \w : 알파벳, 숫자, 언더라인인 것.(word)
// \W : 알파벳, 숫자, 언더라인이 아닌 것
// \s : 공백문자, 탭인 것(space)
// \S : 공백이 아닌 것
// \d : 숫자인 것(digit)
// \D : 숫자가 아닌 것
// \b : 단어(\w)의 경계를 가리킴.(boundary)
// \B : \b의 반대
// \A : ^과 비슷함.
// \Z : $과 비슷함.


// \w : 알파벳, 숫자, 언더라인인 것.
제시어 : A1 B2 c3 d_4 e:5 ffGG77--__--

1. 정규표현식 : \w    => 알파벳, 숫자, 언더라인인 텍스트
Frist match : (A)1 B2 c3 d_4 e:5 ffGG77--__--
All matches : (A1) (B2) (c3) (d_4) (e):(5) (ffGG77)--(__)--

2. 정규표현식 : \w*    => 알파벳, 숫자, 언더라인인 텍스트가 0개 이상인 텍스트
Frist match : (A1) B2 c3 d_4 e:5 ffGG77--__--
All matches : (A1) (B2) (c3) (d_4) (e):(5) (ffGG77)--(__)--

3. 정규표현식 : [a-z]\w*    => a~z + 알파벳, 숫자, 언더라인 0개 이상인 텍스트
Frist match : A1 B2 (c3) d_4 e:5 ffGG77--__--
All matches : A1 B2 (c3) (d_4) (e):5 (ffGG77)--__--

4. 정규표현식 : \w{5}    => 알파벳, 숫자, 언더라인인 텍스트 5글자
Frist match : A1 B2 c3 d_4 e:5 (ffGG7)7--__--
All matches : A1 B2 c3 d_4 e:5 (ffGG7)7--__--

5. 정규표현식 : [A-z0-9_]    => \w 와 같은 의미.
Frist match : (A)1 B2 c3 d_4 e:5 ffGG77--__--
All matches : (A1) (B2) (c3) (d_4) (e):(5) (ffGG77)--(__)--

// \W : 알파벳, 숫자, 언더라인이 아닌 것
제시어 : AS _34:AS11.23 @#$ %12^*

1. 정규표현식 : \W    => 알파벳, 숫자, 언더라인이 아닌 것
Frist match : AS( )_34:AS11.23 @#$ %12^*
All matches : AS( )_34(:)AS11(.)23( @#$ %)12(^*)

2. 정규표현식 : \w    => 알파벳, 숫자, 언더라인인 텍스트
Frist match : (A)S _34:AS11.23 @#$ %12^*
All matches : (AS) (_34):(AS11).(23) @#$ %(12)^*

3. 정규표현식 : [^A-z0-9_]    => \W 와 같은 의미.
Frist match : AS( )_34:AS11.23 @#$ %12^*
All matches : AS( )_34(:)AS11(.)23( @#$ %)12^(*)


// \s : 공백문자, 탭인 것
// \S : 공백이 아닌 것
제시어 : Ere iron was found or tree was hewn, When young was mountain under moon; Ere ring was made, or wrought was woe, It walked the forests long ago.

1. 정규표현식 : \s    => 공백문자, 탭인 것
Frist match : Ere( )iron was found or tree was hewn, When young was mountain under moon; Ere ring was made, or wrought was woe, It walked the forests long ago.
All matches : Ere( )iron( )was( )found( )or( )tree( )was( )hewn,( )When( )young( )was( )mountain( )under( )moon;( )Ere( )ring( )was( )made,( )or( )wrought( )was( )woe,( )It( )walked( )the( )forests( )long( )ago.

2. 정규표현식 : \S    => 공백이 아닌 것
Frist match : (E)re iron was found or tree was hewn, When young was mountain under moon; Ere ring was made, or wrought was woe, It walked the forests long ago.
All matches : (Ere) (iron) (was) (found) (or) (tree) (was) (hewn,) (When) (young) (was) (mountain) (under) (moon;) (Ere) (ring) (was) (made,) (or) (wrought) (was) (woe,) (It) (walked) (the) (forests) (long) (ago.)


// \d : 숫자인 것
// \D : 숫자가 아닌 것
제시어 : Page 123; published: 1234 id=12#24@112

1. 정규표현식 : \d    => 숫자인 것
Frist match : Page (1)23; published: 1234 id=12#24@112
All matches : Page (123); published: (1234) id=(12)#(24)@(112)

2. 정규표현식 : \D    => 숫자가 아닌 것
Frist match : (P)age 123; published: 1234 id=12#24@112
All matches : (Page )123(; published: )1234( id=)12(#)24(@)112

3. 정규표현식 : [0-9]    => \d 와 같은 의미.
Frist match : Page (1)23; published: 1234 id=12#24@112
All matches : Page (123); published: (1234) id=(12)#(24)@(112)


// \b : 단어(\w)의 경계를 가리킴.
// \B : \b의 반대
제시어 : Ere iron was found or tree was hewn, When young was mountain under moon; Ere ring was made, or wrought was woe, It walked the forests long ago.

1. 정규표현식 : \b.    => 어떤 단어의 시작되는 지점(\w)
Frist match : (E)re iron was found or tree was hewn, When young was mountain under moon; Ere ring was made, or wrought was woe, It walked the forests long ago.
All matches : (E)re( i)ron( w)as( f)ound( o)r( t)ree( w)as( h)ewn(,) (W)hen( y)oung( w)as( m)ountain( u)nder( m)oon(;) (E)re( r)ing( w)as( m)ade(,) (o)r( w)rought( w)as( w)oe(,) (I)t( w)alked( t)he( f)orests( l)ong( a)go(.)

2. 정규표현식 : .\b    => 어떤 단어의 끝나는 지점(\w)
Frist match : Er(e) iron was found or tree was hewn, When young was mountain under moon; Ere ring was made, or wrought was woe, It walked the forests long ago.
All matches : Er(e )iro(n )wa(s )foun(d )o(r )tre(e )wa(s )hew(n),( )Whe(n )youn(g )wa(s )mountai(n )unde(r )moo(n);( )Er(e )rin(g )wa(s )mad(e),( )o(r )wrough(t )wa(s )wo(e),( )I(t )walke(d )th(e )forest(s )lon(g )ag(o).

단어 경계는 \b로 표시하며, 단어의 시작이나 마지막을 일치시킬 때 사용한다.
주로, \b를 단어 시작과 마지막에 붙여 정규 표현식에서 찾고자 하는 단어와 완전히 일치시킬 목적으로 사용한다.

제시어 : The cat scattered his food all over the room.

1. 정규표현식 : \bcat\b    => 앞이든 뒤든 cat이라는 텍스트를 찾아라.
First match : The (cat) scattered his food all over the room.
All matches : The (cat) scattered his food all over the room.

제시어 : The captain wore this cap and cape proudly as he sat listening to the recap of how his crew saved the man from capsized vessel.

1. 정규표현식 : \bcap    => 앞에서부터 cap이라는 텍스트를 찾아라.
First match : The (cap)tain wore this cap and cape proudly as he sat listening to the recap of how his crew saved the man from capsized vessel.
All matches : The (cap)tain wore this (cap) and (cap)e proudly as he sat listening to the recap of how his crew saved the man from (cap)sized vessel.

2. 정규표현식 : \Bcap    => cap으로 시작하지 않는 텍스트를 찾아라.
Frist match : The captain wore this cap and cape proudly as he sat listening to the re(cap) of how his crew saved the man from capsized vessel.
All matches : The captain wore this cap and cape proudly as he sat listening to the re(cap) of how his crew saved the man from capsized vessel.



// \A : ^와 비슷하지만 첫째 줄만 검색함.(줄바꿈이 된 것은 찾지않음.)
// \Z : $과 비슷하지만 마지막 줄만 검색함.(줄바꿈이 된 것은 찾지않음.)

제시어 : 
Ere iron was found or tree was hewn, 
When young was mountain under moon; 
Ere ring was made, or wrought was woe, It walked the forests long ago.

1. 정규표현식 : \A...    => 첫째줄에서 3글자로 된 텍스트를 찾아라.
First match : 
(Ere) iron was found or tree was hewn, 
When young was mountain under moon; 
Ere ring was made, or wrought was woe, It walked the forests long ago.

All matches : 
(Ere) iron was found or tree was hewn, 
When young was mountain under moon; 
Ere ring was made, or wrought was woe, It walked the forests long ago.

2. 정규표현식 : ...\Z    => 마지막 줄에서 3글자로 된 텍스트를 찾아라.
First match : 
Ere iron was found or tree was hewn, 
When young was mountain under moon; 
Ere ring was made, or wrought was woe, It walked the forests long a(go.)

All matches : 
Ere iron was found or tree was hewn, 
When young was mountain under moon; 
Ere ring was made, or wrought was woe, It walked the forests long a(go.)

/*******************************************************************************************************************************************************/

Page25~26

// (?=pattern) : 검색하는데 사용하지만 선택할때는 pattern을 제외한다.


제시어 : AAAX---aaax---111

1. 정규표현식 : \w+(?=X)    => \w면서 1개 이상인 문자를 검색하는데 X를 사용하지만 결과에는 X를 제외시켜라.
Frist match : (AAA)X---aaax---111
All matches : (AAA)X---aaax---111  (aaax는 x가 소문자이므로 선택되지 않음.)

2. 정규표현식 : \w+    => \w가 1개 이상인 문자를 찾아라.
Frist match : (AAAX)---aaax---111
All matches : (AAAX)---(aaax)---(111)

3. 정규표현식 : \w+(?=\w)    => \w가 1개 이상인 문자를 검색하는데 \w를 사용하지만 \w를 제외시켜라.
Frist match : (AAA)X---aaax---111
All matches : (AAA)X---(aaa)x---(11)1

/*******************************************************************************************************************************************************/

* 추가사항
g : 발생할 모든 패턴에 대한 전역 검색(global)
i : 대/소문자 구분없이 검색(ignore)

제시어 : 123aaa

※ javascript 기준
1. 정규표현식 :  var reg = /^[0-9]/;
		var text = '123aaa';
		text = text.replace(reg, 'ㅋ');
		console.log(text);
		==> ㅋ23aaa

2. 정규표현식 :  var reg = /^[0-9]/g;
		var text = '123aaa';
		text = text.replace(reg, 'ㅋ');
		console.log(text);
		==> ㅋㅋㅋaaa
		
2. 정규표현식 :  var reg = /^\w/gi;
		var text = '123aaa';
		text = text.replace(reg, 'ㅋ');
		console.log(text);
		==> 123ㅋㅋㅋ
		
